# prevent warning if semver module is loaded
require.once 'semver';

declare -ag semver_invalid;
semver_invalid=( "1" "1.0" "1.0.a" "1.0.0~pre~release" );

declare -ag semver_valid;
semver_valid=(
  "1.0.0"
  "1.0.0-alpha"
  "1.0.0-alpha.1"
  "1.0.0-0.3.7"
  "1.0.0-x.7.z.92"
  "1.0.0-rc.1+build.1"
  "1.3.7+build.2.b8f12d7"
);

# test for valid/invalid semver strings
function test.semver.valid? {
  local str;
  for str in ${semver_invalid[@]}
    do
      semver.valid? "$str";
      assert.eq "1" "$?";
  done
  
  for str in ${semver_valid[@]}
    do
      semver.valid? "$str";
      assert.eq "0" "$?";
  done
}

# test whether a release version is valid
function test.semver.release? {
  # valid
  semver.release? "-rc.1";
  assert.eq "0" "$?";
  
  # invalid
  semver.release? "+rc.1";
  assert.eq "1" "$?";
}

# test whether a build version is valid
function test.semver.build? {
  # valid
  semver.build? "+build.2.b8f12d7";
  assert.eq "0" "$?";
  
  # invalid
  semver.build? "-build.2.b8f12d7";
  assert.eq "1" "$?";
}

# test for increment/decrement major version
function test.semver.major! {
  local semver="1.3.7+build.2.b8f12d7";
  
  # increment
  semver.major! "$semver";
  assert.equal "2.3.7+build.2.b8f12d7" "$_result";
  
  # decrement - use new version and revert to original
  semver.major! - "2.3.7+build.2.b8f12d7";
  assert.equal "1.3.7+build.2.b8f12d7" "$_result";
  
  # cannot decrement past absolute zero version
  semver.major! - "0.0.0";
  assert.equal "0.0.0" "$_result";

  # cannot decrement past zero
  semver.major! - "0.0.1";
  assert.equal "0.0.1" "$_result";
}

# test for increment/decrement minor version
function test.semver.minor! {
  local semver="1.3.7+build.2.b8f12d7";
  
  # increment
  semver.minor! "$semver";
  assert.equal "1.4.7+build.2.b8f12d7" "$_result";
  
  # decrement - use new version and revert to original
  semver.minor! - "1.4.7+build.2.b8f12d7";
  assert.equal "1.3.7+build.2.b8f12d7" "$_result";
  
  # cannot decrement past absolute zero version
  semver.minor! - "0.0.0";
  assert.equal "0.0.0" "$_result";
  
  # cannot decrement past zero
  semver.minor! - "1.0.0";
  assert.equal "1.0.0" "$_result";  
}

# test for increment/decrement patch version
function test.semver.patch! {
  local semver="1.3.7+build.2.b8f12d7";
  
  # increment
  semver.patch! "$semver";
  assert.equal "1.3.8+build.2.b8f12d7" "$_result";
  
  # decrement - use new version and revert to original
  semver.patch! - "1.3.8+build.2.b8f12d7";
  assert.equal "1.3.7+build.2.b8f12d7" "$_result";
  
  # cannot decrement past absolute zero version
  semver.patch! - "0.0.0";
  assert.equal "0.0.0" "$_result";
  
  # cannot decrement past zero
  semver.patch! - "1.0.0";
  assert.equal "1.0.0" "$_result";
}

# test for parsing valid semvers
function test.semver.parse {
  local str;
  semver.callback() {
    # convert the array back to a string
    semver.stringify;
    # assert on the string result
    assert.equal "$str" "$_result";
  }
  for str in ${semver_valid[@]}
    do
      semver.parse "$str" "semver.callback";
  done
  method.remove "semver.callback";
}