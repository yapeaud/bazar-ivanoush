require.once 'tasks/compress';

# test(s) for task-compress(7) create/extract
function test.compress.cx {
  # compress files relative to this test
  local self result;
  require.resolve "self";
  local dir="${self[1]}";
  
  # map between file name and file contents
  # so we can also assert on file contents
  # after decompression
  declare -A entries;
  
  # create the test files from the archive lipsum/etiam test
  # files, repeating the contents n times
  !test.compress.files.create 15;
  
  # TODO: compress files to -o | --output
  # TODO: extract files to -o | --output
  
  local program="tasks.compress";
  local cmd="-c --verbose --debug";
  
  local files=(
    "${dir}/lipsum.txt"
    "${dir}/etiam.txt"
  );
  
  # execute the command
  $program $cmd "${files[@]}";
  
  # check the test and compressed files exist
  local f ext="gz";
  for f in "${files[@]}"
    do
      assert.file.exists? "$f";
      assert.file.exists? "${f}.${ext}";
  done
  
  # test the --noop option not that 
  # we add a couple of .gz files that should not
  # be located using the -c | create command
  cmd="-c --noop";
  result=( $( "$program" $cmd "${files[@]}" "lipsum.txt.gz" "etiam.txt.gz" ) );
  assert.equal "${files[*]}" "${result[*]}";
  
  # test the -x | extract command
  cmd="-x --verbose --debug";
  local compressed=(
    "${files[0]}.${ext}"
    "${files[1]}.${ext}"
  );
  
  # remove source files before decompression
  rm "${files[@]}";
  
  # verify that the source files have gone
  for f in "${files[@]}"
    do
      assert.file.exists! "$f";
  done
  
  # extract compressed versions
  $program $cmd "${compressed[@]}";
  # assert that all files exist again after deflation
  for f in "${files[@]}"
    do
      assert.file.exists? "$f";
      assert.file.exists? "${f}.${ext}";
      # assert on extracted file contents
      assert.equal "${entries["$f"]}" "`cat "$f"`";
  done
  
  # test the --noop option with the -x | extract command
  # we add a couple of source files that should not
  # be located using the -x | extract command
  cmd="-x --noop";
  result=( $( "$program" $cmd "${compressed[@]}" "${files[@]}" ) );
  assert.equal "${compressed[*]}" "${result[*]}";
  
  # clean up after test run
  !test.compress.files.clean;
  
  # recreate test files
  !test.compress.files.create 15;
  
  # now run with the delete option so that
  # we don't keep the source files
  cmd="-c --delete --verbose --debug";
  $program $cmd "${files[@]}";
  
  # should only have the compressed versions now
  for f in "${compressed[@]}"
    do
      assert.file.exists? "$f";     
  done
  # not the original source files
  for f in "${files[@]}";
    do
      assert.file.exists! "$f";
  done
  
  # inverted --delete test on extraction
  cmd="-x --delete --verbose --debug";
  $program $cmd "${compressed[@]}";
  # should only have the source versions now
  for f in "${files[@]}"
    do
      assert.file.exists? "$f";     
  done
  # not the compressed files
  for f in "${compressed[@]}";
    do
      assert.file.exists! "$f";
  done
  
  # clean up again
  !test.compress.files.clean;   
}

# test pattern matching
function test.compress.cx.pattern {
  
  # compress files relative to this test
  local self dir result;
  require.resolve "self";
  dir="${self[1]}";
  
  # map between file name and file contents
  # so we can also assert on file contents
  # after decompression
  declare -A entries;
  
  local program="tasks.compress";
  local cmd="";
  
  local files=(
    "${dir}/lipsum.txt"
    "${dir}/etiam.txt"
  );  
  
  # recreate test files
  !test.compress.files.create 10; 
  
  local ptnfiles=(
    "${dir}/test.js"
    "${dir}/test.css"
  );
  
  # create file(s) that should never be matched
  touch "${ptnfiles[@]}";
  
  # test pattern matching
  
  # match the .txt files only
  cmd="-c --noop --include (\.txt)$";
  result=( $( "$program" $cmd "${files[@]}" "${ptnfiles[@]}" ) );
  assert.eq "2" "${#result[@]}";
  assert.equal "${files[*]}" "${result[*]}";
  
  # match both .txt files (not the .js file)
  # and then skip etiam.txt with the --exclude pattern
  cmd="-c --noop --include (\.txt)$ --exclude ^e";
  result=( $( "$program" $cmd "${files[@]}" "${ptnfiles[@]}" ) ); 
  assert.eq "1" "${#result[@]}";
  
  # include just .txt and .js file(s)
  cmd="-c --noop --include \.(txt|js)$";
  result=( $( "$program" $cmd "${files[@]}" "${ptnfiles[@]}" ) );
  assert.eq "3" "${#result[@]}";
  
  # include just .txt and .js file(s)
  # with multiple patterns
  cmd="-c --noop --include \.js$ --include \.txt$";
  result=( $( "$program" $cmd "${files[@]}" "${ptnfiles[@]}" ) );
  assert.eq "3" "${#result[@]}";
  
  # just exclude the .css file
  cmd="-c --noop --exclude \.css$";
  result=( $( "$program" $cmd "${files[@]}" "${ptnfiles[@]}" ) );
  assert.eq "3" "${#result[@]}";  
  
  # echo "got result: ${!result[@]} : ${result[@]}";
  
  # test for invalid pattern(s)
  local invalid="[^]\+?\s??.?"
  cmd="-c --noop -e $invalid";
  "$program" $cmd "${files[@]}" "${ptnfiles[@]}" & wait %%;
  assert.gt "0" "$?";
  
  cmd="-c --noop -i $invalid";
  "$program" $cmd "${files[@]}" "${ptnfiles[@]}" & wait %%;
  assert.gt "0" "$?";
  
  # clean pattern matching test file(s)
  rm "${dir}/test.js" "${dir}/test.css";
  
  # clean up again
  !test.compress.files.clean; 
}

# test recursive functionality
function test.compress.cx.recursive {
  
  # compress files relative to this test
  local self testname dir outputdir result;
  require.resolve "self";
  testname="${self[0]}";  
  dir="${self[1]}";
  
  #echo "got test name: $testname";
  
  # create an output directory for
  # testing the --output option
  outputdir="${target}/${testname}";
  if [ ! -d "$outputdir" ]; then
    mkdir -p "$outputdir";
  fi
  
  # map between file name and file contents
  # so we can also assert on file contents
  # after decompression
  declare -A entries;
  
  local nested="${dir}/nested";
  local deep="${nested}/deep";
  local deeper="${deep}/deeper";
  
  local program="tasks.compress";
  local cmd="-c --noop";
  
  local files=(
    "${dir}/lipsum.txt"
    "${dir}/etiam.txt"
  );
  
  # recreate test files
  !test.compress.files.create 10; 
  
  # create the nested directory
  # and move test files into it
  mkdir -p "${deeper}";
  # move files into nested
  mv "${files[@]}" "$nested";
  # copy files into deep and deeper
  local nested_files=();
  local nf;
  for nf in "${nested}"/*
    do
      test -f "${nf}" && nested_files+=( "$nf" );
  done

  cp "${nested_files[@]}" "${deep}";
  cp "${nested_files[@]}" "${deeper}";
  
  # first command should only list files in ${dir}/nested
  result=( $( "$program" $cmd "$nested" ) );
  assert.eq "2" "${#result[@]}";
  
  # add recursive option to find all files from ${nested}
  cmd="-c --noop -r";
  result=( $( "$program" $cmd "$nested" ) );
  assert.eq "6" "${#result[@]}";
  
  # use recursive option with an --include pattern 
  cmd="-c --noop -r -i ^e";
  result=( $( "$program" $cmd "$nested" ) );
  assert.eq "3" "${#result[@]}";
  
  # use recursive option with an --exclude pattern 
  cmd="-c --noop -r -e ^lipsum";
  result=( $( "$program" $cmd "$nested" ) );
  assert.eq "3" "${#result[@]}";
  
  # compress to an output directory
  cmd="-c --output $outputdir";
  "$program" $cmd "$nested";
  assert.file.exists? "${outputdir}/lipsum.txt.gz";
  assert.file.exists? "${outputdir}/etiam.txt.gz";
  
  # clean up from last test run
  rm "${outputdir}/lipsum.txt.gz" "${outputdir}/etiam.txt.gz";
  
  # extract to an output directory
  # first we compress as siblings
  # then extract to the output
  cmd="-c";
  "$program" $cmd "$nested";
  cmd="-x --output $outputdir";
  "$program" $cmd "$nested";  
  assert.file.exists? "${outputdir}/lipsum.txt";
  assert.file.exists? "${outputdir}/etiam.txt";
  
  # clean up from last test run
  rm "${outputdir}/lipsum.txt" "${outputdir}/etiam.txt";
  
  # verify that multiple conflicting file names
  # overwrite previous files
  cmd="-c -r --output $outputdir";
  "$program" $cmd "$nested";
  result=( $( ls "$outputdir" ) );
  assert.eq "2" "${#result[@]}";
  
  # clean up from last test run
  rm "${outputdir}/lipsum.txt.gz" "${outputdir}/etiam.txt.gz";  
  
  # same test as above with --recursive option
  cmd="-c -r";
  "$program" $cmd "$nested";
  cmd="-x -r --output $outputdir";
  "$program" $cmd "$nested";
  assert.file.exists? "${outputdir}/lipsum.txt";
  assert.file.exists? "${outputdir}/etiam.txt";
  
  # still only two files, even though we actually
  # deflated and inflated multiple times
  result=( $( ls "$outputdir" ) );
  assert.eq "2" "${#result[@]}";
  
  # clean up from last test run
  rm "${outputdir}/lipsum.txt" "${outputdir}/etiam.txt";
  
  # recreate test files relative to this test
  cmd="-c -r";
  "$program" $cmd "$nested";
  # extract and maintain directory structure
  cmd="-x -r --dir ${dir} --output $outputdir";
  "$program" $cmd "$nested";
  # validate all the files exist in the correct structure
  assert.file.exists? "${outputdir}/nested/lipsum.txt";
  assert.file.exists? "${outputdir}/nested/etiam.txt";
  assert.file.exists? "${outputdir}/nested/deep/lipsum.txt";
  assert.file.exists? "${outputdir}/nested/deep/etiam.txt";
  assert.file.exists? "${outputdir}/nested/deep/deeper/lipsum.txt";
  assert.file.exists? "${outputdir}/nested/deep/deeper/etiam.txt";
  
  # clean up after test run
  rm -rf "${outputdir}/nested";
  
  # inverse test for creating .gz files and maintaining the directory hierarchy
  cmd="-c -r --dir ${dir} --output $outputdir";
  "$program" $cmd "$nested";
  # validate all the files exist in the correct structure
  assert.file.exists? "${outputdir}/nested/lipsum.txt.gz";
  assert.file.exists? "${outputdir}/nested/etiam.txt.gz";
  assert.file.exists? "${outputdir}/nested/deep/lipsum.txt.gz";
  assert.file.exists? "${outputdir}/nested/deep/etiam.txt.gz";
  assert.file.exists? "${outputdir}/nested/deep/deeper/lipsum.txt.gz";
  assert.file.exists? "${outputdir}/nested/deep/deeper/etiam.txt.gz";
  
  # clean up after test run
  rm -rf "${outputdir}/nested";
  
  # clean up
  rm -rf "${nested}";
  
  rmdir "${outputdir}";
}

# test reading file list from stdin
function test.compress.cx.stdin {
  
  # compress files relative to this test
  local self dir ext="gz";
  require.resolve "self";
  dir="${self[1]}";
  
  # map between file name and file contents
  # so we can also assert on file contents
  # after decompression
  declare -A entries;
  
  local program="tasks.compress";
  local cmd="-c";
  
  local files=(
    "${dir}/lipsum.txt"
    "${dir}/etiam.txt"
  );
  
  local compressed=(
    "${files[0]}.${ext}"
    "${files[1]}.${ext}"
  );  
  
  # recreate test files
  !test.compress.files.create 10;
  
  assert.file.exists? "${files[0]}";
  assert.file.exists? "${files[1]}";  
  
  # invalid - nothing passed to stdin, exit >0
  #$program $cmd -;
  
  # valid - nothing passed to stdin but a file found
  # after the hyphen option
  #$program $cmd - lipsum.txt;
  
  local findopts=( "$dir" "-name" "*.txt" );
  # valid - pipe output of command as file list
  find "${findopts[@]}" | $program $cmd -;
  assert.file.exists? "${compressed[0]}";
  assert.file.exists? "${compressed[1]}";
  
  #clean up after test run
  rm "${compressed[@]}";
  
  findopts=( "$dir" "-name" "lipsum.txt" );
  # valid - pipe output and specify files after stdin option
  find "${findopts[@]}" | $program $cmd - "${dir}/etiam.txt";
  assert.file.exists? "${compressed[0]}";
  assert.file.exists? "${compressed[1]}";
  
  #clean up after test run
  rm "${files[@]}" "${compressed[@]}";
}

######################################################################
#
# PRIVATE METHODS
#
######################################################################

# gather test files from ../archive, repeat the contents
# n times and write to this test directory
function !test.compress.files.create {
  local f contents o output i num="${1:-10}";
  
  # clean any existing entries if re-creating
  # the test files
  if [ ${#entries[@]} -gt 0 ]; then
    local k;
    for k in "${!entries[@]}"
      do
        unset entries["$k"];
    done
  fi
  
  # map between file sources and output
  declare -A sources;
  sources["${dir}/../archive/lipsum.txt"]="${dir}/lipsum.txt";
  sources["${dir}/../archive/etiam.txt"]="${dir}/etiam.txt";
  for f in "${!sources[@]}"
    do
      o="${sources["$f"]}";
      contents=$( cat "$f" );
      if [ ! -f "$o" ]; then
        echo -ne "" >| "$o";
      fi
      for((i=0;i < $num;i++))
        do
          echo "$contents" >> "$o";
          # spearate content entries with a newline
          echo "" >> "$o";
      done
      entries["$o"]=$( cat "$o" );
  done
}

# clean the test files
function !test.compress.files.clean {
  local f;
  shopt -s globstar;  
  for f in ${dir}/**
    do
      if [[ "$f" =~ (\.txt|\.gz)$ ]]; then
        rm "$f";
      fi
  done
  shopt -u globstar;
}