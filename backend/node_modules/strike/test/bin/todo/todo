#!/usr/bin/env bash

boilerplate=$( command -v boilerplate.sh ) \
  && . "$boilerplate" && unset boilerplate \
  || { echo "fatal: could not locate boilerplate.sh" && exit 1; }
boilerplate "$@";

# switch on strict mode
process.use strict;

require assert;
require tasks/todo;

# let assert(3) know if this test
# is being run standalone or as
# part of a task-test(7) test suite
assert.parse "$@";

# TODO: complete these tests
todo() {
  local file="${process_dirs[root]}/1.notes.todo";
  # mimic running from bake(1)
  local root="${library_dirs[root]}";
  local target="${root}/target";
  local tasks="tasks";
  declare -A expects_count;
  expects_count[1.notes.todo]="3";
  local commands=( count );
  # invocation type prefixes
  local types=( "${root}/bake" "tasks." "delegate" );
  declare -A delimiters;
  delimiters[0]=' ';
  delimiters[1]='.';
  delimiters[2]=' ';
  local invocation delimiter;
  local f;
  # for f in ${exedir}/*.todo
  #   do
  #     echo "got file $f";
  #     declare -i index=0;
  #     for invocation in ${types[@]}
  #       do
  #         delimiter="${delimiters[$index]}";
  #         echo "got invocation ... $invocation : '$delimiter'";
  #         #set +o nounset;
  #         : $(( index++ ));
  #         #set -o nounset;          
  #     done
  # done
  
  #echo "got file $file"
  tasks.todo scan --file "$file" & wait %%;
  
  # invoke the task function
  #delegate "tasks" "todo" scan --file "$file" || quit $? "task %s failed" "$func";
  
  #echo "AFTER SCAN !!!! $?";
}

todo;
assert.summary;
