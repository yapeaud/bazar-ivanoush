.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "TASK\-SEMVER" "7" "April 2013" "" ""
.
.SH "NAME"
\fBtask\-semver\fR \- semver task(s) for bake(1)
.
.SH "SYNOPSIS"
.
.nf

bake semver [command] [options\|\.\|\.\|\.]
.
.fi
.
.SH "DESCRIPTION"
Task(s) for using the semantic versioning specification in a project\.
.
.P
Command methods for semantic versioning, including semver(7) validation and creation of a project version descriptor\.
.
.SH "REQUIRE"
In your tasks(7) file \fBrequire\fR the \fBsemver\fR task(s) using:
.
.IP "" 4
.
.nf

require \'tasks/semver\';
.
.fi
.
.IP "" 0
.
.SH "COMMANDS"
If no command is specified then \fBinit\fR is assumed\.
.
.TP
\fBinit\fR:

.
.P
Generates the initial task\-semver(7) files\.
.
.P
If no files are available you will be prompted to enter a semver(7) compatible version to initialize the files with\.
.
.P
If a \fIpackage\.json\fR file is available then the semver(7) string is read from the \fBversion\fR field and the \fBversion\fR and \fBsemver\.json\fR files are generated\.
.
.P
If all files exist this command is equivalent to \fBread\fR\.
.
.TP
\fBmajor\fR:

.
.P
Bump the major version\.
.
.TP
\fBminor\fR:

.
.P
Bump the minor version\.
.
.TP
\fBpatch\fR:

.
.P
Bump the patch version\.
.
.TP
\fBread\fR:

.
.P
Print version information for the files managed by task\-semver(7)\.
.
.P
If no task\-semver(7) files are present this command will exit with a >0 exit code, otherwise it will print warnings for any missing files\.
.
.TP
\fBwrite [semver]\fR:

.
.P
Write \fIsemver\fR to disc as the version in use\. Must be a valid semver(7) string\.
.
.TP
\fBsync\fR:

.
.P
Use the \fBsync\fR command to test whether all files are in sync\.
.
.P
If any semver(7) strings do not match warnings will be printed and the exit code will be >0\.
.
.TP
\fBtest [semver]\fR:

.
.P
Test if a semver(7) string is valid\.
.
.SH "PUBLIC RELEASE"
A \fIpublic release\fR is defined as going from major version 0 to major version 1\. This section describe the process involved with performing a \fIpublic release\fR\. Note that the interactivity described here only applies when stdin is a tty\.
.
.SS "Confirm"
Initially task\-semver(7) will display a verbose warning that you are about to perform a \fIpublic release\fR and a prompt asking you whether you wish to proceed\.
.
.P
If you accept the process and the new version is not a 1\.0\.0 version (for example you may be bumping to 1\.1\.0) then a prompt is displayed asking whether you wish to use a 1\.0\.0 version\. Upon accepting this prompt the new version becomes 1\.0\.0, otherwise it will remain at the version originally specified\.
.
.P
Subsequently, the pre\-processing stage begins which attempts to perform various actions that verify the code integrity\.
.
.SS "Test"
The first phase is to run unit tests using \fBnpm test\fR if a \fIpackage\.json\fR file is available or alternatively running the task\-test(7) test command using bake(1)\. The stdout from running the tests are redirected to \fB${target}/release\.test\.log\fR whilst stderr will remain a tty if run from a tty (which allows faster debugging if some tests are failing)\.
.
.P
If the exit code is >0 when running the tests the release process is aborted\.
.
.SH "FILES"
All files are stored in the \fB${root}\fR of the project\. The rules for file precedence are the order described below, so a npm(1) \fIpackage\.json\fR takes precedence, followed by a \fIversion\fR file and finally a \fIsemver\.json\fR file is used if available\.
.
.SS "Package"
An npm(1) package descriptor (\fIpackage\.json\fR) that stores semver(7) information in the \fBversion\fR field\.
.
.SS "Version"
A text file (\fIversion\fR) containing the current semver(7) version\. This file is generated and managed because there are occassions when a program requires quick access to version information without any parsing\. A quick way to access semver(7) information from a strike(7) program is:
.
.IP "" 4
.
.nf

version() {
    local file="${process_dirs[root]}/version";
    local semver=$( cat "$file" );
    console info "version %s" "$semver";
}
version;
.
.fi
.
.IP "" 0
.
.SS "Semver"
A JSON document (\fIsemver\.json\fR) generated by task\-semver(7) containing version information for the project\.
.
.SS "Backup"
If a \fIpackage\.json\fR file is available and sed(1) is available and used to replace the version field, then a \fIpackage\.json\.bak\fR file is created and placed in \fItarget\fR\.
.
.SH "EXAMPLES"
Initialize the files:
.
.IP "" 4
.
.nf

bake semver init
.
.fi
.
.IP "" 0
.
.P
Bump the patch version:
.
.IP "" 4
.
.nf

bake semver patch
.
.fi
.
.IP "" 0
.
.P
Bump the minor version:
.
.IP "" 4
.
.nf

bake semver minor
.
.fi
.
.IP "" 0
.
.P
Bump the major version:
.
.IP "" 4
.
.nf

bake semver major
.
.fi
.
.IP "" 0
.
.P
Write a specific semver version to all files:
.
.IP "" 4
.
.nf

bake semver write 0\.1\.0
.
.fi
.
.IP "" 0
.
.P
View the semver information:
.
.IP "" 4
.
.nf

bake semver read
.
.fi
.
.IP "" 0
.
.P
Attempt to synchronize (when versions are out of sync):
.
.IP "" 4
.
.nf

bake semver sync
.
.fi
.
.IP "" 0
.
.P
Validate a semver string:
.
.IP "" 4
.
.nf

bake semver test 1\.2\.0\-alpha\.1+build\.12f4e9
.
.fi
.
.IP "" 0
.
.SH "BUGS"
\fBtask\-semver\fR is written in bash and depends upon \fBbash\fR >= 4\.2\.
.
.SH "COPYRIGHT"
\fBtask\-semver\fR is copyright (c) 2012 muji \fIhttp://xpm\.io\fR
.
.SH "SEE ALSO"
bake(1), semver(3), semver(7)
