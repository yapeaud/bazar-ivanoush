task-semver(7) -- semver task(s) for bake(1)
=============================================

## SYNOPSIS

	bake semver [command] [options...]

## DESCRIPTION

Task(s) for using the semantic versioning specification in a project.

Command methods for semantic versioning, including semver(7) validation and creation of a project version descriptor.

## REQUIRE

In your tasks(7) file `require` the `semver` task(s) using:

	require 'tasks/semver';

## COMMANDS

If no command is specified then `init` is assumed.

* `init`:
	
Generates the initial task-semver(7) files.

If no files are available you will be prompted to enter a semver(7) compatible version to initialize the files with.
	
If a *package.json* file is available then the semver(7) string is read from the `version` field and the `version` and `semver.json` files are generated.

If all files exist this command is equivalent to `read`.

* `major`:

Bump the major version.

* `minor`:

Bump the minor version.

* `patch`:

Bump the patch version.
	
* `read`:
	
Print version information for the files managed by task-semver(7).
	
If no task-semver(7) files are present this command will exit with a >0 exit code, otherwise it will print warnings for any missing files.

* `write [semver]`:
	
Write *semver* to disc as the version in use. Must be a valid semver(7) string.

* `sync`:

Use the `sync` command to test whether all files are in sync.
	
If any semver(7) strings do not match warnings will be printed and the exit code will be >0.

* `test [semver]`:

Test if a semver(7) string is valid.
	
## PUBLIC RELEASE

A *public release* is defined as going from major version 0 to major version 1. This section describe the process involved with performing a *public release*. Note that the interactivity described here only applies when stdin is a tty.

### Confirm

Initially task-semver(7) will display a verbose warning that you are about to perform a *public release* and a prompt asking you whether you wish to proceed.

If you accept the process and the new version is not a 1.0.0 version (for example you may be bumping to 1.1.0) then a prompt is displayed asking whether you wish to use a 1.0.0 version. Upon accepting this prompt the new version becomes 1.0.0, otherwise it will remain at the version originally specified.

Subsequently, the pre-processing stage begins which attempts to perform various actions that verify the code integrity.

### Test

The first phase is to run unit tests using `npm test` if a *package.json* file is available or alternatively running the task-test(7) test command using bake(1). The stdout from running the tests are redirected to `${target}/release.test.log` whilst stderr will remain a tty if run from a tty (which allows faster debugging if some tests are failing).

If the exit code is >0 when running the tests the release process is aborted.
	
## FILES

All files are stored in the `${root}` of the project. The rules for file precedence are the order described below, so a npm(1) *package.json* takes precedence, followed by a *version* file and finally a *semver.json* file is used if available.

### Package

An npm(1) package descriptor (*package.json*) that stores semver(7) information in the `version` field.

### Version

A text file (*version*) containing the current semver(7) version. This file is generated and managed because there are occassions when a program requires quick access to version information without any parsing. A quick way to access semver(7) information from a strike(7) program is:

	version() {
		local file="${process_dirs[root]}/version";
		local semver=$( cat "$file" );
		console info "version %s" "$semver";
	}
	version;

### Semver

A JSON document (*semver.json*) generated by task-semver(7) containing version information for the project.

### Backup

If a *package.json* file is available and sed(1) is available and used to replace the version field, then a *package.json.bak* file is created and placed in *target*.

## EXAMPLES

Initialize the files:

	bake semver init
	
Bump the patch version:

	bake semver patch
	
Bump the minor version:

	bake semver minor
	
Bump the major version:

	bake semver major
	
Write a specific semver version to all files:

	bake semver write 0.1.0
	
View the semver information:

	bake semver read
	
Attempt to synchronize (when versions are out of sync):

	bake semver sync

Validate a semver string:

	bake semver test 1.2.0-alpha.1+build.12f4e9

## BUGS

**task-semver** is written in bash and depends upon `bash` >= 4.2.

## COPYRIGHT

**task-semver** is copyright (c) 2012 muji <http://xpm.io>

## SEE ALSO

bake(1), semver(3), semver(7)
