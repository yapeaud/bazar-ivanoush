task-test(7) -- unit test task(s) for bake(1)
=============================================

## SYNOPSIS

Unit test task(s) for bake(1).

## DESCRIPTION

Adds task methods for unit testing bash(1) programs, unit tests are defined in files with a `.test` extension or as standalone executables with the `test/bin` directory.

Binary tests (in `test/bin`) are determined using the `-x` file test flag therefore it is important to ensure you *do not make files executable that are not test executables*.

## REQUIRE

In your tasks(7) file `require` the `test` task(s) using:

	require 'tasks/test';

## USAGE

	bake test [command] [suite:test...]
	
When no test suites are specified all test suites will be executed, otherwise pass a list of specific tests to run. Note that when specifying the test suites you *do not* include the `.test` file extension.

## COMMANDS

* `run`:

	Run one or more test suites.
	
* `ls`:

	List test suites and test methods (if test methods have been specified). Use this command to test which test suites would be matched by the commands passed to task-test(7).
	
	If some tests have been excluded they are listed at the end with each test suite name preceeded by an exclamation mark '!'.
	
* `make`:

	Attempts to run a make(1) *test* target.
	
* `rake`:

	Attempts to run a rake(1) *test* task.
	
* `ant`:

	Attempts to run an ant(1) *test* target.
	
* `mvn`:

	Attempts to run a mvn(1) *test* goal.
	
## GLOBALS

If you want to declare variables or methods global to all test suites place them in `lib/globals` relative to the test directory. They will be sourced prior to running any tests (and prior to running any declared global setup command).
	
## SETUP & TEARDOWN

This section describes how to configure *setup* and *teardown* for all test suites or for individual test suites.

### Global

Global *setup* and *teardown* commands are executed before and after the test runner runs all suites or specific suites.

To configure global *setup* and *teardown* methods create the files `lib/setup` and `lib/teardown` relative to the test directory and within each file declare the `tdd.setup` and `tdd.teardown` commands respectively.

### Suite

To declare *setup* and *teardown* commands specific to a test suite declare the `tdd.setup` and `tdd.teardown` commands within the test suite and they will be invoked before and after all `test.*` commands for that suite.
	
## EXAMPLES

These examples are based on the unit tests in the `test` directory of the strike(7) repository.

The following commands are equivalent for running all tests:

	bake test
	bake test run
	
Run an individual test suite:

	bake test run json.stringify
	
Run multiple test suites:

	bake test run json.stringify json.checker
	
Run a single method of a test suite:

	bake test run json.stringify:basic
	
Note you omit the `test` prefix as well as the test suite prefix `json.stringify` when referencing method names.

Run multiple methods of a test suite delimited by the colon ':' character:

	bake test run json.stringify:basic:boolean
	
It is an error condition to have a leading or trailing colon and the exit code will be >0 in this situation.

## FILES

The `stdout` generated by unit tests is written to `${target}/test.stdout.log` whilst the `stderr` output from the unit tests is written to `${target}/test.stderr.log`.

## BUGS

**task-test** is written in bash and depends upon `bash` >= 4.2.

## COPYRIGHT

**task-test** is copyright (c) 2012 muji <http://xpm.io>

## SEE ALSO

bake(1), assert(7)
