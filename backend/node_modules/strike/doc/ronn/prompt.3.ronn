prompt(3) -- user input module
=============================================

## SYNOPSIS

	prompt [command] [options...]

## DESCRIPTION

Captures user input using `read`.

## COMMANDS

* `confirm`:

Capture a boolean response, this is useful for confirmation prompts. By default, the values *yes* and *no* are used as the strings for comparison as to whether the confirmation was accepted or rejected. Comparison is done in a case-insensitive comparison on the first character of the received input.

If the input does not match an accept or reject value then the prompt is re-displayed.

* `line`:

Capture a non-empty string value from a single line of input. If the received line is empty then the prompt is re-displayed.

* `select`:

Display a menu using the `select` builtin.

## OPTIONS

* `--id=[identifier]`:

Associate *id* with a prompt.

* `--hist-file=[file]`:

Use *file* for the history file. If this option is not specified no history is maintained, if *file* does not exist it is created.

* `--before=[command]`:

Execute *command* before reading input.

* `--response=[command]`:

Execute *command* when input is received.

* `--acccepted=[command]`:

Execute *command* when a confirm prompt is accepted.

* `--rejected=[command]`:

Execute *command* when a confirm prompt is rejected.

* `--validate=[command]`:

Execute *command* to validate a value, if the exit code of the command is greater than zero the prompt is re-displayed. The command is passed a single argument containing the value.

* `--select-error=[command]`:

Execute *command* when a select menu receives input that is non-numeric.

* `--select-range-error=[command]`:

Execute *command* when a select menu receives input that is numeric but falls outside of the range.

* `--complete=[function]`:

Execute *function* when the tab key is pressed to generate custom completion specifications. This option is repeatable, functions are executed in declaration order.

When this option is not specified the default readline completion is used, otherwise the complete functions override the default behaviour.

* `--timeout=[seconds]`:

Use *seconds* as the prompt timeout. If *seconds* is non-numeric or zero it is ignored. Equivalent to `read -t`.

* `--quit=[words]`:

Use in conjunction with the `--infinite` option to stop an infinite prompt if the entered value matches any word in *words*.

* `--default=[value]`:

Use *value* when the user input is empty. This option may be used to override the default behaviour of re-displaying a prompt when no input is received.

* `-s | --silent`:

Do not echo input. Use this when capturing sensitive information such as passwords. Equivalent to `read -s`.

* `-m | --multiline`:

Allow multiline input so that a backslash escape followed by a newline continues capturing data for a prompt. Equivalent to `read -r`.

* `-e | --exec`:

Allow shell command execution. When this option is present each line entered is executed as a shell command using `bash -c` so that redirection, pipes and other more complex shell commands are possible.

* `-i | --infinite`:

Show a prompt infinitely. After a line has been read then the prompt is re-displayed.

## BUGS

**prompt** is written in bash and depends upon `bash` >= 4.2.

## COPYRIGHT

**prompt** is copyright (c) 2012 muji <http://xpm.io>

## SEE ALSO

prompt(1), console(3)