#!/usr/bin/env bash

# NOTE: this boilerplate logic is slightly
# NOTE: different to the standard as bake(1)
# NOTE: needs to be run during the make check
# NOTE: installation rule. the logic below
# NOTE: allows bake(1) to run without boilerplate.sh
# NOTE: having previously been installed
boilerplate() {
  local dir="${BASH_SOURCE[0]}";
  [[ -L "${dir}" ]] && dir=$( readlink "${BASH_SOURCE[0]}" );
  [[ -f "${dir}" ]] && dir=$( dirname -- "${dir}" );
  dir=$( cd "${dir}" && pwd );
  export PATH="${dir}:${PATH}";
  boilerplate=$( command -v boilerplate.sh ) \
    && . "$boilerplate" && unset boilerplate \
    || { echo "fatal: could not locate boilerplate.sh" && exit 1; }
  # reset the path
  export PATH=${PATH#*:};
  boilerplate "$@";
}
boilerplate $@;

# switch on strict mode
process.use strict;

require tasks/util;

# configure help
#require opts/help;
taskman default "bake.1";
taskman ls "task-ls.7";
taskman test "task-test.7";
taskman doc "task-doc.7";
taskman clean "task-clean.7";
taskman semver "task-semver.7";
taskman project "task-project.7";
taskman deploy "task-deploy.7";
taskman deploy-json "task-deploy-json.7";
taskman module "task-module.7";
help.parse "$@";

if [ $# -eq 0 ]; then
  help.man.show.default;
  exit 0;
fi

require opts/version;
version.parse "$@";

# default builtin tasks
require tasks/ls;
require tasks/clean;

bake() {
  local verbose=false;
  local namespace="tasks";
  local tasks_file_name="${bake_file_name:-tasks}";
  fs.walk "$tasks_file_name";
  local f="$_result";
  if [ ! -f "$f" ]; then
    console quit 1 -- \
      "no %s file in %s (or any of the parent directories)" \
      "$tasks_file_name" "${PWD}";
  else
    # variables to expose to the task(s)
    local root=$( dirname -- $f );
    [[ -n "${bake_root:-}" ]] && root="${bake_root}";
    local target="${root}/target";
    local tasks="$f";
    # expose project variable pointing to the 
    # root so that submodules may access the root
    # of the project using this variable
    # this is because ${root} is changed when submodules
    # are used
    local project="${root}";
    if [ ! -d "${target}" ]; then
      mkdir -p "${target}";
    fi
    # TODO: extract name/version from package.json
    # if bake_use_npm is set and package.json exists
    local project_name;
    fs.basename "${root}" "project_name";

    # TODO: use task/semver to retrieve version information
    local project_version="0.0.0";
    if [ -f "${root}/version" ]; then
      project_version=$( cat "${root}/version" );
    fi
    # set the temporary directory to `target`
    # for bake(1) processes
    process.tmp.dir "${target}";
    require "$f";
    local cmd="$1";
    shift;
    local options=();
    bake.options.parse $@;
    set -- ${options[@]:-};
    local func="${namespace}.${cmd}";
    if ! method.exists? "$func"; then
      console quit 2 -- "task %s not found" "$cmd";
    fi
    # invoke the task function
    delegate "${namespace}" "$cmd" $@ \
      || console quit $? -- "task %s failed" "$func";
  fi
}

bake.options.parse() {
  local opts=( $@ );
  local opt i length="${#opts[@]}";
  for((i=0;i < $length;i++))
    do
      opt="${opts[$i]}";
      case "$opt" in
        --color=auto | --color=never | --color=always )
          sprintf_color="${opt#*=}";
          ;;
        -v | --verbose )
          verbose=true;
          ;;
        * )
          options+=( "$opt" );
          ;;
      esac
  done
}

bake "$@";
